@startuml

class RPSapp {
    - GameModel gameModel
    - MatchController matchController
    - AppView appView
    + RockScissorsPaperApp()
    + runGame()
    + setupGame()
    + exit()
}

/'PACKAGE VIEW'/
package View{
    class AppView {
        + showMainMenu()
        + showExitGame()
        + getMessage()
    }

    class MatchView {
        + displayMatchMenu()
        + assignTypeOfPlayer(int numberOfPlayer)
        + announceWinnerOfTheMatch(PlayerModel winner)
    }

    class RoundView {
        + selectShapes()
        + announceMatchBeginning()
        + announceRoundWinner()
        + void Rounds()
        + void runningRound()
    }

    class PlayerView {
        + getPlayer()
        + getName(String message)
        + selectShape()
    }

    class HumanPlayerView {
        + getName(String message)
        + selectShape()
    }

    class ComputerPlayerView {
        + getName(String message)
        + selectShape()
        + getAlphaNumericString(int n)

    }

    PlayerView <|-- HumanPlayerView 
    PlayerView <|-- ComputerPlayerView
    AppView ..> MatchView
    MatchView ..> RoundView
    MatchView ..> PlayerView
}

/'PACKAGE CONTROLLER'/
package Controller {
    class MatchController {
        - MatchModel matchModel
        - MatchView matchview
        - PlayerController[] playersController
        - RoundController roundController
        + MatchController(MatchModel matchModel)
        + setupGame()
        - runGame()
        - finishGame()
        - announceWinnerOfTheMatch()
    }

    class RoundController {
        - PlayerController[] playersController
        - ScoreModel score
        - RoundView roundView
        - ArrayList<RoundModel> rounds
        + RoundController()
        + setScore()
        + setPlayerController
        - addRound()
        + getRounds()
        + setupNewRound()
        - executeRound(RoundModel round)
        - ROCKPAPERSCISSOR(List<Shape> playerShapes)
        - announceWinnerOfTheRound()
        + getLastWinner()
        - updateScoreGame(int assingPoint)
    }

    abstract class PlayerController {
        - PlayerModel playerModel
        - PlayerView playerView
        - PlayerType playerType
        + PlayerController() 
        - PlayerView initPlayerView()
        - PlayerType initPlayerType()
        + getNewGamePlayer()
        + getPlayer()
        + getName()
        + selectShape()
    }

    class HumanPlayerController {
        + initPlayerView()
        + initPlayerType()
        + selectShape()
    }

    class ComputerPlayercontroller {
        + initPlayerView()
        + initPlayerType()
        + selectShape()
    }

    /'class ScoreController {
        - int p1Score
        - int p2Score
        + void showFinalResults()
        + int getP1Score()
        + int getP2Score()
        + void updateScoreGame()
    }'/

    RPSapp *-- MatchController
    PlayerController <|-- HumanPlayerController
    PlayerController <|-- ComputerPlayercontroller
    MatchController --> RoundController
    /'MatchController --> ScoreController'/
    PlayerController <-- MatchController

}

/'PACKAGE MODEL'/
package model {
    class RPSGameModel {
        - MatchModel matchModel
        + getMatch()
    }

    class MatchModel {
        - PlayerModel[] players
        - ScoreModel score
        - ArrayList<RoundModel> rounds
        - PlayerModel winner
        + newMatch(PlayerModel[] players)
    }
    
    class RoundModel {
        - int roundNumber
        - Shape player1Shape
        - Shape player2Shape
        - PlayerModel winner
        - boolean isTie
        + RoundModel(int currentRound)
    }

    class ScoreModel {
        - int roundNumber
        - int p1Score
        - int p2Score
        + ScoreModel()
    }

    class PlayerModel{
        - name
        - playerType
        + PlayerModel(String name)
    }

    class TypePlayer {
        HUMANPLAYER
        IA
    }

    class Shapes {
        Rock
        Paper
        Scissors
    }

    RPSGameModel *-- MatchModel
    MatchModel *-- RoundModel
    MatchModel *-- PlayerModel
    PlayerModel *-- TypePlayer
    MatchModel *-- ScoreModel
    RoundModel o-- Shapes
}

@enduml