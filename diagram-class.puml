@startuml ClassDiagram

abstract class Players{
    # int currentScore
    # Shapes shapeSelected

    + void chooseAShape()
    + Shapes getShapeSelected()
    + int getCurrentScore()
    + void setCurrentScore()
}
class HumanPlayer{}
class ComputerPlayer{}
class Score{
    - int playersBestScore

    + void updateScoreGame()
    + void showFinalResults()
    + int getPlayersScore()

}
class Rounds{
    - int roundsPlayed
    - Shapes playerAShapeSelected
    - Shapes playerBShapeSelected
    + void Evaluate()
    + void ChangeTurn
}

class Match{
    + void createScore()
    + void countRounds()
    + void executeRounds()
}

abstract class Shapes{}

class Rock{
    + final boolean beatsPaper
    + final boolean beatsScissors
}
class Paper{
    + final boolean beatsRock
    + final boolean beatsScissors
}
class Scissors{
    + final boolean beatsPaper
    + final boolean beatsRock
}

class RpsGame{            
    - Players playerA
    - Players playerB
    - Score score
    - Rounds rounds 

    + void rpsGame()
    + void clearGame()
    + void choosePlayers()
    + void setGame()
    + void startGame()
}

RpsGame *-- Players
RpsGame *-- Score
RpsGame *-- Rounds
RpsGame *-- Match

Shapes <|-- Rock
Shapes <|-- Paper
Shapes <|-- Scissors

Players *-- Shapes
Match --> Players
Players <|-- HumanPlayer
Players <|-- ComputerPlayer

Score -left-> Players
Rounds --> Score
Match *-- Rounds
Match *-- Score

@enduml